package com.hoodlum;

import com.hoodlum.antlr.HoodlumLexer;
import com.hoodlum.antlr.HoodlumParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;

import java.io.File;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Bytecode mode for Hoodlum - compiles to JVM bytecode and executes.
 */
public class BytecodeRunner {
    
    public static void main(String[] args) throws Exception {
        // Parse input
        String input;
        if (args.length == 0) {
            input = "PRINT 42;\nPRINT cash;\nPRINT \"Hello Hoodlum\";\n";
        } else {
            input = Files.readString(Paths.get(args[0]));
        }
        
        System.out.println("Compiling Hoodlum to bytecode...");
        System.out.println("Input program:");
        System.out.println(input);
        System.out.println();
        
        // Parse
        var lexer = new HoodlumLexer(CharStreams.fromString(input));
        var tokens = new CommonTokenStream(lexer);
        var parser = new HoodlumParser(tokens);
        var tree = parser.program();
        
        if (parser.getNumberOfSyntaxErrors() > 0) {
            System.err.println("Parse errors found!");
            return;
        }
        
        // Compile to bytecode
        String className = "HoodlumProgram";
        var compiler = new BytecodeCompiler(className);
        compiler.visit(tree);
        byte[] bytecode = compiler.compile();
        
        // Write class file
        Path classFile = Paths.get(className + ".class");
        Files.write(classFile, bytecode);
        System.out.println("Generated bytecode: " + classFile.toAbsolutePath());
        
        // Load and execute
        System.out.println("Executing bytecode:");
        System.out.println("---");
        
        // Create custom class loader
        File currentDir = new File(".");
        URLClassLoader classLoader = new URLClassLoader(new URL[]{currentDir.toURI().toURL()});
        
        // Load the generated class
        Class<?> generatedClass = classLoader.loadClass(className);
        
        // Get main method and invoke it
        Method mainMethod = generatedClass.getMethod("main", String[].class);
        mainMethod.invoke(null, (Object) new String[0]);
        
        System.out.println("---");
        System.out.println("Bytecode execution complete.");
        
        classLoader.close();
    }
}
